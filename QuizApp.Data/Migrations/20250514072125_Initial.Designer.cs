// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizApp.Domain.EF;

#nullable disable

namespace QuizApp.Domain.Migrations
{
    [DbContext(typeof(QuizAppDbContext))]
    [Migration("20250514072125_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizApp.Domain.Entities.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnswerId"));

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            AnswerId = 1,
                            AnswerText = "4",
                            IsCorrect = true,
                            QuestionId = 1
                        },
                        new
                        {
                            AnswerId = 2,
                            AnswerText = "5",
                            IsCorrect = false,
                            QuestionId = 1
                        },
                        new
                        {
                            AnswerId = 3,
                            AnswerText = "9",
                            IsCorrect = true,
                            QuestionId = 2
                        },
                        new
                        {
                            AnswerId = 4,
                            AnswerText = "6",
                            IsCorrect = false,
                            QuestionId = 2
                        });
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.HasKey("QuestionId");

                    b.HasIndex("QuizId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            QuestionId = 1,
                            QuestionText = "What is 2 + 2?",
                            QuizId = 1
                        },
                        new
                        {
                            QuestionId = 2,
                            QuestionText = "What is 3 * 3?",
                            QuizId = 1
                        });
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.Quiz", b =>
                {
                    b.Property<int>("QuizId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuizId"));

                    b.Property<int>("PassingScore")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TotalQuestions")
                        .HasColumnType("int");

                    b.HasKey("QuizId");

                    b.ToTable("Quizzes");

                    b.HasData(
                        new
                        {
                            QuizId = 1,
                            PassingScore = 50,
                            Title = "Basic Math Quiz",
                            TotalQuestions = 2
                        });
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.QuizAttempt", b =>
                {
                    b.Property<int>("AttemptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttemptId"));

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Passed")
                        .HasColumnType("bit");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AttemptId");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("QuizAttempts");

                    b.HasData(
                        new
                        {
                            AttemptId = 1,
                            EndTime = new DateTime(2024, 1, 1, 10, 10, 0, 0, DateTimeKind.Utc),
                            Passed = true,
                            QuizId = 1,
                            Score = 100,
                            StartTime = new DateTime(2024, 1, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "john@example.com",
                            Password = "password123",
                            UserName = "john_doe"
                        });
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.UserAnswer", b =>
                {
                    b.Property<int>("UserAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserAnswerId"));

                    b.Property<int?>("AnswerId")
                        .HasColumnType("int");

                    b.Property<int>("AttemptId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionId1")
                        .HasColumnType("int");

                    b.Property<int?>("QuizAttemptAttemptId")
                        .HasColumnType("int");

                    b.Property<int>("SelectedAnswerId")
                        .HasColumnType("int");

                    b.HasKey("UserAnswerId");

                    b.HasIndex("AnswerId");

                    b.HasIndex("AttemptId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuestionId1");

                    b.HasIndex("QuizAttemptAttemptId");

                    b.HasIndex("SelectedAnswerId");

                    b.ToTable("UserAnswers");

                    b.HasData(
                        new
                        {
                            UserAnswerId = 1,
                            AttemptId = 1,
                            IsCorrect = true,
                            QuestionId = 1,
                            SelectedAnswerId = 1
                        },
                        new
                        {
                            UserAnswerId = 2,
                            AttemptId = 1,
                            IsCorrect = true,
                            QuestionId = 2,
                            SelectedAnswerId = 3
                        });
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.Answer", b =>
                {
                    b.HasOne("QuizApp.Domain.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.Question", b =>
                {
                    b.HasOne("QuizApp.Domain.Entities.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.QuizAttempt", b =>
                {
                    b.HasOne("QuizApp.Domain.Entities.Quiz", "Quiz")
                        .WithMany("QuizAttempts")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizApp.Domain.Entities.User", "User")
                        .WithMany("QuizAttempts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.UserAnswer", b =>
                {
                    b.HasOne("QuizApp.Domain.Entities.Answer", null)
                        .WithMany("UserAnswers")
                        .HasForeignKey("AnswerId");

                    b.HasOne("QuizApp.Domain.Entities.QuizAttempt", "QuizAttempt")
                        .WithMany()
                        .HasForeignKey("AttemptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizApp.Domain.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizApp.Domain.Entities.Question", null)
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuestionId1");

                    b.HasOne("QuizApp.Domain.Entities.QuizAttempt", null)
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuizAttemptAttemptId");

                    b.HasOne("QuizApp.Domain.Entities.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("SelectedAnswerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Question");

                    b.Navigation("QuizAttempt");
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.Answer", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.Quiz", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("QuizAttempts");
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.QuizAttempt", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("QuizApp.Domain.Entities.User", b =>
                {
                    b.Navigation("QuizAttempts");
                });
#pragma warning restore 612, 618
        }
    }
}
